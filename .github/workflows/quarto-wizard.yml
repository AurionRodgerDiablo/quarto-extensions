name: Quarto Wizard

on:
  workflow_dispatch:
  release:
    types: [published]
  push:
    branches: main
    paths:
      - extensions/quarto-extensions.csv
  schedule:
    - cron: '0 6 * * *'

jobs:
  quarto-wizard:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.github_token }}
      BRANCH: quarto-wizard
      COMMIT: "ci: update extensions details"
      CSV_FILE: "extensions/quarto-extensions.csv"
    steps:
      - uses: actions/checkout@v4

      - name: Git Config
        shell: bash
        run: |
          git config --local user.name github-actions[bot]
          git config --local user.email 41898282+github-actions[bot]@users.noreply.github.com
          git fetch origin
          if git show-ref --verify --quiet refs/heads/"${BRANCH}"; then
            echo "Branch exists"
            git checkout "${BRANCH}"
          else
            echo "Branch does not exist"
            git checkout --orphan "${BRANCH}"
            git rm -rf .
            git commit --allow-empty -m "ci: setup quarto-wizard branch"
            git push --force origin "${BRANCH}"
            git checkout "${BRANCH}"
          fi
          git fetch origin "${BRANCH}"
          git pull origin "${BRANCH}"

      - name: Get extensions details
        shell: bash
        run: |
          git checkout main -- ${{ env.CSV_FILE }}
          JSON_FILE="quarto-extensions.json"
    
          extensions_details=()
          sort -f ${{ env.CSV_FILE }} | while IFS=, read -r entry; do
            echo "Processing entry: ${entry}"
            repo=$(echo "${entry}" | cut -d'/' -f1,2)
            repo_info=$(
              gh repo view "${repo}" \
                --json name,nameWithOwner,owner,description,stargazerCount,licenseInfo,url,latestRelease \
                --jq '{(.nameWithOwner): {name: .name, nameWithOwner: .nameWithOwner, owner: .owner.login, description: .description, stargazerCount: .stargazerCount, licenseInfo: .licenseInfo.name, url: .url, latestRelease: .latestRelease.tagName}}'
            )
            echo "Repo info: ${repo_info}"
            extensions_details+=("${repo_info}")
          done

          json_output=$(printf "%s\n" "${extensions_details[@]}" | jq -s 'add')
          echo "${json_output}" > "${JSON_FILE}"
          rm -f ${{ env.CSV_FILE }}
          git rm -f ${{ env.CSV_FILE }}
          git add "${JSON_FILE}" || echo "No changes to commit"
          git commit -m "${COMMIT}" || echo "No changes to commit"
          git push --force origin ${BRANCH} || echo "No changes to commit"
