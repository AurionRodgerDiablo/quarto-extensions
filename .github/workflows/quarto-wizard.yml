name: Quarto Wizard

on:
  workflow_dispatch:
  release:
    types: [published]
  push:
    branches: main
    paths:
      - extensions/quarto-extensions.csv
  schedule:
    - cron: '0 6 * * *'

jobs:
  quarto-wizard:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.github_token }}
      BRANCH: quarto-wizard
      COMMIT: "ci: update extensions details"
      CSV_FILE: "extensions/quarto-extensions.csv"
    steps:
      - uses: actions/checkout@v4
        with:
          ref: quarto-wizard

      - name: Git Config
        if: false
        shell: bash
        run: |
          git config --local user.name github-actions[bot]
          git config --local user.email 41898282+github-actions[bot]@users.noreply.github.com

      - name: Branch Setup
        if: false
        shell: bash
        run: |
          git fetch --all
          if git show-ref --verify --quiet refs/heads/"${BRANCH}"; then
            echo "Branch exists"
          else
            echo "Branch does not exist"
            git checkout --orphan "${BRANCH}"
            git rm -rf .
            git commit --allow-empty -m "ci: setup quarto-wizard branch"
            git push --force origin "${BRANCH}"
          fi
          git checkout "${BRANCH}"

      - name: Get extensions details
        shell: bash
        run: |
          JSON_FILE="quarto-extensions.json"
          echo "*" > .gitignore
          echo "!${JSON_FILE}" > .gitignore
          git checkout main -- ${CSV_FILE}
          git rm --cached ${CSV_FILE}
    
          EXTENSION_DETAILS=()
          while IFS=, read -r entry; do
            echo "Processing entry: ${entry}"
            repo=$(echo "${entry}" | cut -d'/' -f1,2)
            repo_info=$(
              gh repo view "${repo}" \
                --json name,nameWithOwner,owner,description,stargazerCount,licenseInfo,url,latestRelease \
                --jq '{name: .name, nameWithOwner: .nameWithOwner, owner: .owner.login, description: .description, stargazerCount: .stargazerCount, licenseInfo: .licenseInfo.name, url: .url, latestRelease: .latestRelease.tagName}'
            )
            repo_info=$(echo "${repo_info}" | jq --arg entry "${entry,,}" '{($entry): .}')
            EXTENSION_DETAILS+=("${repo_info}")
          done < <(sort -f ${CSV_FILE})
          json_output=$(printf "%s\n" "${EXTENSION_DETAILS[@]}" | jq -s 'add')
          echo "${json_output}" > "${JSON_FILE}"
          
          rm -f ${CSV_FILE}
          git add ${JSON_FILE} || echo "No changes to commit"
          git commit -m "${COMMIT}" || echo "No changes to commit"
          git push --force origin ${BRANCH} || echo "No changes to commit"
